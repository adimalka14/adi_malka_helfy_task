import PropTypes from 'prop-types';
import { useFormik, useField } from 'formik';
import * as Yup from 'yup';

function LabeledInput({ label, ...props }) {
    const [field, meta] = useField(props);
    return (
        <label style={{ display: 'grid', gap: '0.25rem' }}>
            <span>{label}</span>
            <input {...field} {...props} />
            {meta.touched && meta.error ? (
                <div style={{ color: '#ef4444', fontSize: '0.9rem' }}>{meta.error}</div>
            ) : null}
        </label>
    );
}
function LabeledTextarea({ label, rows = 3, ...props }) {
    const [field, meta] = useField(props);
    return (
        <label style={{ display: 'grid', gap: '0.25rem' }}>
            <span>{label}</span>
            <textarea {...field} {...props} rows={rows} />
            {meta.touched && meta.error ? (
                <div style={{ color: '#ef4444', fontSize: '0.9rem' }}>{meta.error}</div>
            ) : null}
        </label>
    );
}
function LabeledSelect({ label, children, ...props }) {
    const [field, meta] = useField(props);
    return (
        <label style={{ display: 'grid', gap: '0.25rem' }}>
            <span>{label}</span>
            <select {...field} {...props}>{children}</select>
            {meta.touched && meta.error ? (
                <div style={{ color: '#ef4444', fontSize: '0.9rem' }}>{meta.error}</div>
            ) : null}
        </label>
    );
}

const schema = Yup.object({
    title: Yup.string().trim().min(1, 'Title is required').required('Title is required'),
    description: Yup.string().trim(),
    priority: Yup.mixed().oneOf(['low','medium','high']).required('Priority is required'),
});

export default function TaskForm({ mode='create', taskId, initialValues, onSubmit, onCancel, onDelete }) {
    const isEdit = mode === 'edit';

    const formik = useFormik({
        initialValues: {
            title: initialValues?.title ?? '',
            description: initialValues?.description ?? '',
            priority: initialValues?.priority ?? 'medium',
        },
        validationSchema: schema,
        enableReinitialize: true,
        onSubmit: async (values, helpers) => {
            try {
                await onSubmit?.({
                    title: values.title.trim(),
                    description: (values.description ?? '').trim(),
                    priority: values.priority,
                });
            } finally {
                helpers.setSubmitting(false);
            }
        },
    });

    return (
        <form
            onSubmit={formik.handleSubmit}
            style={{ border: '1px solid #e5e7eb', borderRadius: '0.6rem', padding: '0.8rem', background: '#fff', display: 'grid', gap: '0.6rem' }}
        >
            <LabeledInput name="title" label="Title" placeholder="Task title"
                          onBlur={formik.handleBlur} onChange={formik.handleChange} value={formik.values.title} />
            <LabeledTextarea name="description" label="Description (optional)" placeholder="Detailsâ€¦"
                             onBlur={formik.handleBlur} onChange={formik.handleChange} value={formik.values.description} rows={3} />
            <LabeledSelect name="priority" label="Priority"
                           onBlur={formik.handleBlur} onChange={formik.handleChange} value={formik.values.priority}>
                <option value="low">low</option>
                <option value="medium">medium</option>
                <option value="high">high</option>
            </LabeledSelect>

            <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'space-between', marginTop: '0.4rem' }}>
                {isEdit && onDelete && (
                    <button
                        type="button"
                        className="danger"
                        onClick={() => onDelete(taskId)}
                        disabled={formik.isSubmitting}
                    >
                        Delete
                    </button>
                )}
                <div style={{ marginLeft: 'auto', display: 'flex', gap: '0.5rem' }}>
                    {onCancel && (
                        <button type="button" onClick={onCancel} disabled={formik.isSubmitting}>
                            Cancel
                        </button>
                    )}
                    <button type="submit" disabled={formik.isSubmitting}>
                        {isEdit ? 'Save' : 'Create'}
                    </button>
                </div>
            </div>
        </form>
    );
}

TaskForm.propTypes = {
    mode: PropTypes.oneOf(['create','edit']),
    taskId: PropTypes.string,
    initialValues: PropTypes.shape({
        title: PropTypes.string,
        description: PropTypes.string,
        priority: PropTypes.oneOf(['low','medium','high']),
    }),
    onSubmit: PropTypes.func.isRequired,
    onCancel: PropTypes.func,
    onDelete: PropTypes.func,
};
